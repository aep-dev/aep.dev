# Apply

In REST APIs, it is customary to make a `PUT` request to a collection's URI (for
example, `/v1/publishers/{publisher}/books`) in order to create or replace a new
resource within that collection.

Resource-oriented design (AEP-121) honors this pattern through the `Apply`
method. These RPCs accept the parent collection and the resource to create or
replace, and then return, the final resource.

## Guidance

APIs **should** provide an apply method for resources unless it is not valuable
for users to do so.

### Operation

Apply methods are specified using the following pattern:

- The HTTP verb **must** be `PUT`.
- Some resources take longer to be applied than is reasonable for a regular API
  request. In this situation, the API **should** use a [long-running
  operation](/long-running-operations).

- The method's name **must** begin with the word `Apply`. The remainder of the
  method name **should** be the singular form of the resource being applied.
- The collection's parent resource **must** be called `parent`, and
  **should** be the only variable in the URI path.
  - The collection identifier (`books` in the above example) **must** be a
    literal string.
- The operation **must** have [strong consistency][].

{% tab proto %}

{% sample '../example.proto', 'rpc ApplyBook' %}

- The request message **must** match the method name, with a `Request` suffix.
- There **must** be a `body` key in the `google.api.http` annotation, and it
  **must** map to the resource field in the request message.
  - All remaining fields **should** map to URI query parameters.
- There **should** be exactly one `google.api.method_signature` annotation,
  with a value of `"parent,{resource},id"`, or "`"parent,{resource}"` if the
  resource ID is not required.

{% tab oas %}

```http
PUT /v1/publishers/{publisher}/books/{book} HTTP/2
Host: bookstore.example.com
Accept: application/json
{
  "title": "Pride and Prejudice",
  "author": "Jane Austen"
}
```

{% endtabs %}

### Requests

Apply methods implement a common request message pattern:

- A `path` field **must** be supported, and map to the URI path.
- The resource **must** be included and **must** map to the POST body.
- The request schema **must not** contain any other required fields and
  **should not** contain other optional fields except those described in this
  or another AEP.

{% tab proto %}

{% sample '../example.proto', 'message ApplyBookRequest' %}

- A `path` field specifying the path of the resource **must** be included.
  - The field **must** be [annotated as `REQUIRED`][aep-203].
  - The field **must** identify the [resource type][aep-4] of the resource
    being applied.
- The request message **must not** contain any other required fields and
  **should not** contain other optional fields except those described in this
  or another AEP.

{% tab oas %}

{% sample '../example.oas.yaml', '$.paths./publishers/{publisher}/books/{book}.put.requestBody' %}

- The request body **must** be the resource being applied.

{% endtabs %}

### Responses

- The response **must** be the resource itself. There is no separate response
  schema.
  - The response **should** include the fully-populated resource, and **must**
    include any fields that were provided unless they are input only (see
    AEP-203).

{% tab proto %}

{% sample '../example.proto', 'message Book' %}

{% tab oas %}

{% sample '../example.oas.yaml', '$.paths./publishers/{publisher}/books/{book}.put.responses.200' %}

{% endtabs %}

### Errors

See [errors][], in particular [when to use PERMISSION_DENIED and NOT_FOUND
errors][permission-denied].

## Interface Definitions

{% tab proto %}

{% sample '../example.proto', 'rpc ApplyBook' %}

{% sample '../example.proto', 'message ApplyBookRequest' %}

{% sample '../example.proto', 'message Book' %}

{% tab oas %}

{% sample '../example.oas.yaml', '$.paths./publishers/{publisher}/books/{book}.put' %}

{% endtabs %}

## Further reading

- For ensuring idempotency in `Apply` methods, see AEP-155.
- For naming resources involving Unicode, see AEP-210.

[aep-121]: ./0121.md
[aep-122]: ./0122.md
[aep-4]: ./0004.md
[aep-155]: ./0155.md
[aep-203]: ./0203.md
[aep-210]: ./0210.md
[data plane]: ./0111.md#data-plane
[errors]: ./0193.md
[field_behavior]: ./203.md
[Declarative clients]: ./0003.md#declarative-clients
[permission-denied]: ./0193.md#permission-denied
[strong consistency]: ./0121.md#strong-consistency
