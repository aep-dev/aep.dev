# Singleton resources

APIs sometimes need to represent a resource where exactly one instance of the
resource always exists within any given parent. A common use case for this is
for a config object.

## Guidance

An API **may** define _singleton resources_. A singleton resource **must**
always exist by virtue of the existence of its parent, with one and exactly one
per parent.

For example:

{% tab proto %}
```proto
message Config {
  option (google.api.resource) = {
    type: "api.example.com/Config"
    pattern: "users/{user}/config"
  };

  // additional fields including name
}
```

The `Config` singleton would have the following RPCs:

```proto
rpc GetConfig(GetConfigRequest) returns (Config) {
  option (google.api.http) = {
    get: "/v1/{name=users/*/config}"
  };
}

rpc UpdateConfig(UpdateConfigRequest) returns (Config) {
  option (google.api.http) = {
    patch: "/v1/{config.name=users/*/config}"
    body: "config"
  };
}
```

{% tab oas %}

```yaml
components:
  schemas:
    Config:
      type: object
      properties:
        name:
          type: string
        # additional properties...
      required:
        - name
  parameters:
    user:
      in: path
      name: user
      required: true
      schema:
        type: string
```

The `Config` singleton would have the following methods:

```yaml
paths:
  users/{user}/config:
    get:
      operationId: getUserConfig
      parameters:
      - $ref: '#/components/parameters/user'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    patch:
      operationId: updateUserConfig
      parameters:
      - $ref: '#/components/parameters/user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
```

{% endtabs %}

- Singleton resources **must not** have a user-provided or system-generated ID;
  their [resource name][aep-122] includes the name of their parent followed by
  one static-segment.
  - Example: `users/1234/config`
- Singleton resources are always singular.
  - Example: `users/1234/thing`
- Singleton resources **may** parent other resources.
- Singleton resources **must not** define the [`Create`][aep-133] or
  [`Delete`][aep-135] standard methods. The singleton is implicitly created or
  deleted when its parent is created or deleted.
- Singleton resources **should** define the [`Get`][aep-131] and
  [`Update`][aep-134] methods, and **may** define custom methods as
  appropriate.
  - However, singleton resources **must not** define the [`Update`][aep-134]
    method if all fields on the resource are [output only][aep-203].
- Singleton resources **may** define the [`List`][aep-132] method, but **must**
  implement it according to [AEP-159][aep-159]. See the example below.
  - The trailing segment in the path pattern that typically represents the
    collection **should** be the `plural` form of the Singleton resource e.g.
    `/v1/{parent=users/*}/configs`.
  - If a parent resource ID is provided instead of the hyphen `-` as per
    [AEP-159][aep-159], then the service **should** return a collection of one Singleton
    resource corresponding to the specified parent resource.

{% tab proto %}

```proto
rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {
  option (google.api.http) = {
    get: "/v1/{parent=users/*}/configs"
  };
}

message ListConfigsRequest {
  // To list all configs, use `-` as the user id.
  // Formats:
  // * `users/-`
  // * `users/{user}`
  //
  // Note: Specifying an actual user id will return a collection of one config.
  // Use GetConfig instead.
  string parent = 1 [
    (google.api.resource_reference).child_type = "api.example.com/Config"];

  // other standard pagination fields...
}
```

{% tab oas %}

```yaml
components:
  schemas:
    UserConfigCollection:
      type: object
      properties:
        configs:
          type: array
          items:
            '$ref': '#/components/schemas/Config'

paths:
  users/-/configs:
    get:
      operationId: listUserConfigs
      # standard pagination parameters...
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConfigCollection'
```

{% endtabs %}

## Rationale

### Support for Standard List

While Singleton resources are not directly part of a collection themselves, they
can be viewed as part of their parent's collection. The one-to-one relationship
of parent-to-singleton means that for every one parent there is one singleton
instance, naturally enabling some collection-based methods when combined with
the pattern of [Reading Across Collections][aep-159]. The Singleton can present
as a collection to the API consumer as it is indirectly one based on its parent.
Furthermore, presenting the Singleton resource as a pseudo-collection in such
methods enables future expansion to a real collection, should a Singleton be
found lacking.


[aep-122]: ./0122.md
[aep-131]: ./0131.md
[aep-132]: ./0132.md
[aep-133]: ./0133.md
[aep-134]: ./0134.md
[aep-135]: ./0135.md
[aep-159]: ./0159.md
[aep-203]: ./0203.md#output-only
