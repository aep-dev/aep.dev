// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

// A service representing a library.
service Library {
  // Archives the given book.
  rpc ArchiveBook(ArchiveBookRequest) returns (ArchiveBookResponse) {
    option (google.api.http) = {
      post: "/v1/{name=publishers/*/books/*}:archive"
      body: "*"
    };
  }

  // Sorts the books from this publisher.
  rpc SortBooks(SortBooksRequest) returns (SortBooksResponse) {
    option (google.api.http) = {
      post: "/v1/{publisher=publishers/*}/books:sort"
      body: "*"
    };
  }
}

// Request message to archive a book.
message ArchiveBookRequest {
  // The name of the book to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "library.googleapis.com/Book"
    }];

  // The target format for the archived book.
  // Must be "application/pdf", "application/rtf", or "application/epub+zip"
  string mime_type = 2;
}

// Response message for archiving a book.
message ArchiveBookResponse {
  // The location of the archived book
  string uri = 1;
}

// Request message to sort a collection of books.
message SortBooksRequest {
  // The name of the publisher to sort books for.
  string publisher = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "library.googleapis.com/Publisher"
    }];

  // The property of the book to sort by.
  // If not provided, "title" is used.
  string field = 2;
}

// Response message for a sorted collection of books.
message SortBooksResponse {}

// A representation of a single book.
message Book {
  option (google.api.resource) = {
    type: "library.googleapis.com/Book"
    pattern: "publishers/{publisher}/books/{book}"
  };

  // The name of the book.
  // Format: publishers/{publisher}/books/{book}
  string name = 1;

  // The ISBN (International Standard Book Number) for this book.
  string isbn = 2;

  // The title of the book.
  string title = 3;

  // The author or authors of the book.
  repeated string authors = 4;

  // The rating assigned to the book.
  float rating = 5;
}
