# DELETE for individual resources

In REST APIs, it is customary to make a `DELETE` request to a resource's URI
(for example, `/v1/publishers/{publisher}/books/{book}`) in order to delete
that resource.

Services implement this pattern by allowing `DELETE` requests to be sent to the
resource URI, which deletes the resource.

## Guidance

APIs **should** generally provide a `DELETE` method for resources unless it is
not valuable for users to do so. When the `DELETE` method is used on a URI
ending in a resource ID or resource ID alias, the resource should be deleted,
and the result should be a `204 No Content` empty response.

### Requests

Single-resource `DELETE` operations **must** be made by sending a `DELETE`
request to the resource's URI:

```http
DELETE /v1/publishers/{publisher}/books/{book} HTTP/2
Host: library.googleapis.com
Accept: application/json
```

- The HTTP method **must** be `DELETE`.
- There **must not** be a request body.
  - If a `DELETE` request contains a body, the body **must** be ignored, and
    **must not** cause an error.
- The request **must not** require any fields in the query string. The request
  **should not** include optional fields in the query string unless described
  in another AIP.
- Single-resource `DELETE` operations **must** return `204 No Content` with no
  response body.
  - Exception: If the resource is soft deleted (AIP-164), in which case the
    operation **must** return `200 OK` and the resource itself, without any
    additional wrapping.

{% tab proto %}

{% sample 'delete.proto', 'rpc DeleteBook' %}

- The RPC's name **must** begin with the word `Delete`. The remainder of the
  RPC name **should** be the singular form of the resource's message name.
- The request message **must** match the RPC name, with a `-Request` suffix.
- The response message **should** be `google.protobuf.Empty`.
  - If the resource is [soft deleted](#soft-delete), the response message
    **should** be the resource itself.
  - If the delete RPC is [long-running](#long-running-delete), the response
    message **must** be a `google.longrunning.Operation` which resolves to the
    correct response.
- The request message field receiving the resource name **should** map to the
  URI path.
  - This field **should** be called `name`.
  - The `name` field **should** be the only variable in the URI path. All
    remaining parameters **should** map to URI query parameters.
- There **must not** be a `body` key in the `google.api.http` annotation.
- There **should** be exactly one `google.api.method_signature` annotation,
  with a value of `"name"`. If an etag or force field are used, they **may** be
  included in the signature.

`Delete` methods have consistent request messages:

{% sample 'delete.proto', 'message DeleteBookRequest' %}

- A `name` field **must** be included. It **should** be called `name`.
  - The field **should** be [annotated as required][aip-203].
  - The field **should** identify the [resource type][aip-123] that it
    references.
- The comment for the field **should** document the resource pattern.
- The request message **must not** contain any other required fields, and
  **should not** contain other optional fields except those described in this
  or another AIP.

{% tab oas %}

{% sample 'delete.oas.yaml', 'paths' %}

- The `operationId` **must** begin with the word `delete`. The remainder of the
  `operationId` **should** be the singular form of the resource type's name.
- The URI **should** contain a variable for each individual ID in the resource
  hierarchy.
  - The path parameter for all resource IDs **must** be in the form
    `{resourceName}Id` (such as `bookId`), and path parameters representing the
    ID of the parent resources **must** end with `Id`.

{% endtabs %}

### Errors

If the user does not have sufficient permission to know that the resource
exists, the service **should** reply with an HTTP 403 error, regardless of
whether or not the resource exists, as described in AIP-211. Permission
**must** be checked prior to checking if the resource exists.

If the user has sufficient permission to know that the resource exists, but is
unable to access it, the service **should** error with `403 Forbidden`.

If the user does have proper permission, but the requested resource does not
exist, the service **must** error with `404 Not Found` unless `allow_missing`
is set to `true`.

### Soft delete

**Note:** This material was moved into its own document to provide a more
comprehensive treatment: AIP-164.

### Long-running delete

Some resources take longer to delete a resource than is reasonable for a
regular API request. In this situation, the operation **should** be defined as
a [long-running request][aip-151] instead:

{% tab proto %}

{% sample 'lro_delete.proto', 'rpc DeleteBook' %}

- The response type **must** be set to the appropriate return type if the RPC
  was not long-running: `google.protobuf.Empty` for most Delete RPCs, or the
  resource itself for soft delete (AIP-164).
- Both the `response_type` and `metadata_type` fields **must** be specified
  (even if they are `google.protobuf.Empty`).

{% tab oas %}

{% sample 'lro_delete.oas.yaml', 'paths' %}

{% endtabs %}

**Note:** Declarative-friendly resources (AIP-128) **should** use long-running
delete.

### Cascading delete

Sometimes, it may be necessary for users to be able to delete a resource as
well as all applicable child resources. However, since deletion is usually
permanent, it is also important that users not do so accidentally, as
reconstructing wiped-out child resources may be quite difficult.

If an API allows deletion of a resource that may have child resources, the API
**should** provide a `bool force` field on the request, which the user sets to
explicitly opt in to a cascading delete.

{% tab proto %}

{% sample 'cascading_delete.proto', 'message DeletePublisherRequest' %}

{% tab oas %}

{% sample 'cascading_delete.oas.yaml', 'paths' %}

{% endtabs %}

The API **must** error with `412 Precondition Failed` if the `force` field is
`false` (or unset) and child resources are present.

### Protected delete

Sometimes, it may be necessary for users to ensure that no changes have been
made to a resource that is being deleted. If a resource provides an
[etag][aip-154], the delete request **may** accept the etag (as either required
or optional):

{% tab proto %}

{% sample 'protected_delete.proto', 'message DeleteBookRequest' %}

{% tab oas %}

{% sample 'protected_delete.oas.yaml', 'paths' %}

{% endtabs %}

If the etag is provided and does not match the server-computed etag, the
request **must** error with `412 Precondition Failed`.

**Note:** Declarative-friendly resources (AIP-128) **must** provide
[etags][aip-154] for Delete requests.

### Delete if existing

If the service uses client-assigned resource names, `Delete` methods **may**
expose a `bool allow_missing` field, which will cause the method to succeed in
the event that the user attempts to delete a resource that is not present (in
which case the request is a no-op):

{% tab proto %}

{% sample 'delete_if_existing.proto', 'message DeleteBookRequest' %}

{% tab oas %}

{% sample 'delete_if_existing.oas.yaml', 'paths' %}

{% endtabs %}

More specifically, the `allow_missing` flag triggers the following behavior:

- If the method call is on a resource that does not exist, the request is a
  no-op.
  - The `etag` field is ignored.
- If the method call is on a resource that already exists, the resource is
  deleted (subject to other checks).

**Note:** Declarative-friendly resources (AIP-128) **should** expose the
`bool allow_missing` field.

## Further reading

- For soft delete and undelete, see AIP-164.
- For bulk deleting large numbers of resources based on a filter, see AIP-165.
