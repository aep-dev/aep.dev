# Change validation

Occasionally, a user wants to validate an intended change to see what the
result will be before actually making the change. For example, a request to
provision new servers in a fleet will have an impact on the overall fleet size
and cost, and could potentially have unexpected downstream effects.

## Guidance

Operations **may** provide an field to validate, but not actually execute, the
request. To provide this option, the operation **should** include a `dry_run`
boolean field:

```http
PATCH /v1/publishers/{publisher}/books/{book}?dryRun=true HTTP/2
Host: library.googleapis.com
Accept: application/json
```

- Standard operations **must** expose the `dry_run` field on the query string.
- Custom operations **may** expose the `dry_run` field in the request body, on
  the query string, or accept either one.

### Responses

An operation **may** return a `204 No Content` response when asked to perform a
dry run, which **must** be an empty response.

Alternatively, an operation **may** provide the same response (status code,
headers, and response body) that it would have provided if the request was
actually executed.

Under this approach, it may be infeasible to provide the full output. For
example, if creating a resource would create an auto-generated ID, it does not
make sense to do this on validation. The operation **should** prefer to use
`204 No Content` in this scenario, but if a populated response is needed, the
operation **should** omit such fields on the response.

**Note:** When representing fields that can not be populated, non-zero or
non-empty sentinel values **must not** be used.

### Validation scope

When performing a dry run, the service **should** check all of the following:

- The validity of the request according to the schema.
- Referential integrity of values in the request, if applicable.
- Whether the user has permission to make the request.
- Whether the user has sufficient quota to make the request.

A request using `dry_run` **must** fail if it can be determined that the actual
request would fail.

**Note:** An operation **may** elect not to exhaustively check certain
implementation-specific details if validating them would be expensive or pose a
security concern. Therefore, a successful dry run indicates that an equivalent
live request is likely to succeed, but is not a full guarantee of success.

## Interface Definitions

{% tab proto %}

{% sample 'standard_operation.proto', 'message CreateBookRequest' %}

- The `dry_run` field **must** use the `bool` type.
- The `dry_run` field **must not** be annotated as `REQUIRED`.
- In protocol buffers, the same response type is always used for a single RPC.
  The operation **may** return the response message with no fields populated.

{% tab operations %}

{% sample 'standard_operation.oas.yaml', 'paths' %}

- The `dryRun` query parameter **must** be `type: boolean`.
- The `dryRun` query parameter **must not** be `required: true`.
- createBook could also return a 204 response if `dryRun` is `true`.

{% endtabs %}
